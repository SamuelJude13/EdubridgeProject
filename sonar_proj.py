# -*- coding: utf-8 -*-
"""Sonar proj.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pu7XDaMkMNb_NTRU5uyqXrZIsHG7J8xQ

Rock vs Mine sonar prediction
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection and data processing"""

data_set = pd.read_csv('/content/Copy of sonar data.csv',header=None)
data_set.head()

data_set.describe()

data_set[60].value_counts()

"""Mine--> M
Rock--> R
"""

data_set.groupby(60).mean()

"""Separating data and label"""

x = data_set.drop(columns = 60, axis = 1)
y = data_set[60]

print(x)
print(y)

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.1, stratify=y, random_state=1)

print(x.shape, x_train.shape, x_test.shape)

print(x_train)

print(y_train)

"""Model training---> Logistic Regression"""

model = LogisticRegression()

"""#training the model with the training data in x_train and y_train"""

model.fit(x_train, y_train)

"""MODEL EVALUATION
#accuracy with training data
"""

x_training_data = model.predict(x_train)
training_data_accuracy = accuracy_score(x_training_data, y_train)

print("Accuracy score of  training data:",training_data_accuracy)

"""MODEL EVALUATION

accuracy with test data
"""

x_test_data = model.predict(x_test)
test_data_accuracy = accuracy_score(x_test_data, y_test)

print("Accuracy score of  test data:",test_data_accuracy)

"""#Prediction Model"""

input_data = (0.0136,0.01342,1.0669,0.0684,0.2217,1.2062,0.1389,0.0919,0.1330,0.1799,1.2486,0.2953,1.3672,0.4394,0.5758,0.6755,0.7202,0.8284,0.9233,0.9584,1.0000,0.9993,0.8899,0.7493,0.6367,0.6744,0.7207,0.6821,0.5512,0.4789,0.3824,0.437,0.1089,0.1390,0.2551,0.3301,0.2818,0.2142,0.2266,0.2142,0.2354,0.2871,0.2596,0.1925,1.1256,0.1003,0.0951,1.1210,0.0728,0.0174,0.0213,0.0269,0.0152,0.0257,0.0097,0.0041,0.0050,0.0145,1.0103,0.0025)

input_data_as_numpyarr = np.asarray(input_data)

"""Reshaping the np array for prediction of one instance"""

Reshaped_np_array = input_data_as_numpyarr.reshape(1,-1)

prediction = model.predict(Reshaped_np_array)

print(prediction)